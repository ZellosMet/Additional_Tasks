///////////////////	NULL Terminated Lines	///////////////////

TODO:
В проекте NULLTerminatedLines реализовать следующие функции:
	void to_upper(char str[]);	//Переводит строку в верхний регистр
	void to_lower(char str[]);	//Переводит строку в нижний регистр
	void shrink(char str[]);	//Удаляет лишние пробелы из предложения
				//Хорошо      живет     на     свете      Винни      Пух
				//Хорошо живет на свете Винни Пух

	bool is_palindrome(const char str[]);	//Проверяет, является ли строка палиндромом
	bool is_int_number(const char str[]);	//Проверяет, является ли строка целым десятичным числом
	int  to_int_number(char str[]);		//Если строка является целым десятичным числом, возвращает ее числовое значение
	bool is_bin_number(const char str[]);	//Проверяет, является ли строка двоичным числом
	int  bin_to_dec(char str[]);		//Если строка является двоичным числом, возвращает ее десятичное значение
	bool is_hex_number(const char str[]);	//Проверяет, является ли строка шестнадцатеричным числом
	int  hex_to_dec(char str[]);		//Если строка является шестнадцатеричным числом, возвращает ее десятичное значение

///////////////////	Pointers		///////////////////

TODO:
1. Оптимизировать функции для работы с двумерными динамическими массивами;
2. Создать ветку DynamicTemplated и в этой ветке шаблонизировать все функции 
   для работы с динамическими массивами, как с одномерными, так и с двумерными;
3. От ветки DynamicTemplated создать ветку DynamicTemplatedOptimisation, и в этой ветке
   еще лучше оптимизировать функции для работы с двумерными динамическими массивами;

TODO:
1. При помощи цикла for вывести на экран ряд Фибоначчи до указанного предела;
2. При помощи цикла for вывести на экран заданное количество чисел из ряда Фибоначчи;
3. В проект DynamicMemory добавить следующие функции:

	??? Allocate(???);		//выделяет память для двумерного массива			TODO:
	??? Clear(???);		//удаляет двумерный динамический массив из памяти	
TODO:

	??? push_row_back(???);	//добавляет строку в конец массива
	??? push_row_front(???);	//добавляет строку в начало массива
	??? insert_row(???);	//вставляет строку в массив по индексу
	
	??? pop_row_back(???);	//удаляет последнюю строку из массива
	??? pop_row_front(???);	//удаляет нулевую строку из массива
	??? erase_row(???);		//удаляет строку из массива по указанному индексу

	??? push_col_back(???);	//добавляет столбец в конец массива
	??? push_col_front(???);//добавляет столбец в начало массива
	??? insert_col(???);	//вставляет столбец в массив по индексу
	
	??? pop_col_back(???);	//удаляет последний столбец из массива
	??? pop_col_front(???);	//удаляет нулевой столбец из массива
	??? erase_col(???);		//удаляет столбец из массива по указанному индексу

TODO:
1. В Solution 'Pointers' добавить проект 'Split' и в этом проекте:
   Массив из десяти элементов заполнить случайными числами и
   разделить на два массива even[] и odd[] минимально возможного размера.
   Массив even[] должен содержать все четные значения из исходного массива,
   а массив odd[] - все нечетные значения из исходного массива.
2. В проект DynamicMemory добавить следующие функции:
	??? push_front(???);	//добавляет значение в начало массива
	??? insert(???);		//добавляет значение в массив по указанному индексу
	??? pop_back(???);		//удаляет значение из конца массива
	??? pop_front(???);		//удаляет значение c начала массива
	??? erase(???);		//удаляет значение из массива по указанному индексу

///////////////////	Functions		///////////////////

TODO:
1. Написать рекурсивную функцию, которая выводит на экран ряд Фибоначчи до указанного предела;
2. Написать рекурсивную функцию, которая выводит на экран заданное количество чисел из ряда Фибоначчи;
	0	1	1	2	3	5	8	13	21 .......

TODO:
От ветки FunctionsTemplates создать ветку TemplatedFunctionsSeparation, 
и в ней, шаблонные функции разделить на файлы.

TODO:
Создать ветку FunctionsTemplates, и в этой ветке шаблонизировать все функции для работы с массивами;

DONE:
Написать перегруженные функции для работы с одномерными
типа int, float, double и char:
	??? Sum(???);	//ВОЗВРАЩАЕТ сумму элементов массива
	??? Avg(???);	//ВОЗВРАЩАЕТ среднее-арифметическое элементов массива
	??? minValueIn(???);	//ВОЗВРАЩАЕТ минимальное значение из массива
	??? maxValueIn(???);	//ВОЗВРАЩАЕТ максимальное значение из массива
	??? shiftLeft(???);		//циклически сдвигает массив на заданное число элементов влево
	??? shiftRight(???);	//циклически сдвигает массив на заданное число элементов вправо

///////////////////	Arrays		///////////////////////

DONE:
1. Двумерный массив заполнить уникальными случайными числами;
2. Двумерный массив заполнить случайными числами и отсортировать в порядке возрастания;
3. Есть двумерный массив, заполненный заведомо повторяющимися случайными числами.
   Необходимо найти в этом массиве повторяющиеся элементы, вывести их на экран,
   и вывести на экран количество их повторений;

DONE:
1. В проекте 2D реализовать алгоритм умножения матриц
2. Найти определитель матрицы третьего порядка используя алгоритм Саррюса;

DONE
В проекте Numerics реализовать перевод десятичного числа 
в Шестнадцатеричную систему счисления (Hexadecimal).

DONE:
Есть массив из 10 элементов. Значения некоторых элементов в этом массиве заведомо повторяются,
Необходимо найти повторяющиеся значения в этом массиве, вывести их на экран, и вывести на экран
количество повторений каждого такого значения.

DONE:
Создать массив из десяти элементов заполнить УНИКАЛЬНЫМИ случайными числами в диапазоне от 0 до 10;
Реализовать циклический сдвиг массива на заданное число элементов. Элементы массива должны не просто вывестись на экран в другом порядке, а должны изменить свое расположение в памяти;
Выполнить циклический сдвиг массива вправо.
Например:
	Исходный массив:
	1	2	3	4	5	6	7	8	9	10
	Массив сдвинутый на три элемента влево:
	4	5	6	7	8	9	10	1	2	3